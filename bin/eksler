#!/usr/bin/env bash
set -euo pipefail
. functions.sh

export AWS_PAGER=""
export EKSCTL_LOG_LEVEL=${EKSCTL_LOG_LEVEL:-3}

subcommand=${1:-}
case "${subcommand}" in
  list)
    exec eksctl --verbose $EKSCTL_LOG_LEVEL get cluster --all-regions -v 4
  ;;
esac

export REGION=$2
export CLUSTER_NAME=$3

case "${subcommand}" in
  get)
    exec eksctl --verbose $EKSCTL_LOG_LEVEL get cluster --region=$REGION --name=$CLUSTER_NAME
  ;;
  delete)
    set +e
      eksctl --verbose $EKSCTL_LOG_LEVEL delete cluster --region=$REGION --name=$CLUSTER_NAME
    set -e

    _never $0 get $REGION $CLUSTER_NAME

    if aws --region $REGION cloudformation describe-stacks --stack-name=eksctl-$CLUSTER_NAME-cluster; then
      _forever aws --region $REGION cloudformation delete-stack --stack-name=eksctl-$CLUSTER_NAME-cluster
    fi
  ;;
  create)
    network=${4}

    echo """
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: '$CLUSTER_NAME'
  region: '$REGION'
  version: '1.21'

addons:
  - name: vpc-cni
    version: latest
  - name: coredns
    version: latest
  - name: kube-proxy
    version: latest

iam:
  withOIDC: true
""" >/tmp/eksler.cluster.$REGION.$CLUSTER_NAME.yml

    if [ "$network" = "ipv6" ]; then
      echo """
kubernetesNetworkConfig:
  ipFamily: IPv6
""" >>/tmp/eksler.cluster.$REGION.$CLUSTER_NAME.yml
    fi

    if ! $0 get $REGION $CLUSTER_NAME; then
      cat /tmp/eksler.cluster.$REGION.$CLUSTER_NAME.yml
      _forever eksctl --verbose $EKSCTL_LOG_LEVEL create cluster -f /tmp/eksler.cluster.$REGION.$CLUSTER_NAME.yml
    else
      _output "cluster already exists"
    fi

    $0 with $REGION $CLUSTER_NAME kubeconfig
  ;;
  with)
    withcommand=$4

    export KUBECONFIG="$HOME/.kube/aws-eks-${REGION}-${CLUSTER_NAME}"

    if [ ! -f "${KUBECONFIG}" ] && [ "${withcommand}" != "kubeconfig" ]; then
      $0 with $REGION $CLUSTER_NAME kubeconfig
    fi

    # TODO: https://github.com/kubernetes-sigs/aws-load-balancer-controller/issues/2469

    case "${withcommand}" in
      kubeconfig)
        (
          exec eksctl --verbose $EKSCTL_LOG_LEVEL utils write-kubeconfig --cluster="${CLUSTER_NAME}" --region="${REGION}" --kubeconfig="${KUBECONFIG}"
        ) 2>&1 >/dev/null

        echo $KUBECONFIG
      ;;
      list)
        json=$(eksctl --verbose $EKSCTL_LOG_LEVEL get nodegroups --region="${REGION}" --cluster="${CLUSTER_NAME}" --output=json)
        echo $json > /tmp/eksler.last

        echo $json | jq -r '.[].Name'
      ;;
      create|delete|get)
        nodegroup=$5
        case "${withcommand}" in
          create)
            label_pairs=""
            for opt in ${@:6}; do
              case $opt in
                --instance-prefix=*)
                  instance_prefix=${opt#*=}
                ;;
                --instance-name=*)
                  instance_name=${opt#*=}
                ;;
                --label=*)
                  label_pairs="$label_pairs ${opt#*=}"
                ;;
                --instance-selector-vcpus=*)
                  instance_selector__vcpus=${opt#*=}
                ;;
                --instance-selector-memory=*)
                  instance_selector__memory=${opt#*=}
                ;;
                --instance-types=*)
                  instance_types=${opt#*=}
                ;;
                --instance-type=*)
                  instance_type=${opt#*=}
                ;;
                --ami=*)
                  ami=${opt#*=}
                ;;
                --ami-family=*)
                  ami_family=${opt#*=}
                ;;
                --volume-size=*)
                  volume_size=${opt#*=}
                ;;
                --volume-type=*)
                  volume_type=${opt#*=}
                ;;
                --volume-iops=*)
                  volume_iops=${opt#*=}
                ;;
                --volume-throughput=*)
                  volume_throughput=${opt#*=}
                ;;
                --min-size=*)
                  min_size=${opt#*=}
                ;;
                --max-size=*)
                  max_size=${opt#*=}
                ;;
                --spot=*)
                  spot=${opt#*=}
                ;;
                *)
                  _err "unknown opt: $opt"
                ;;
              esac
            done

            instance_prefix=${instance_prefix:-}
            instance_name=${instance_name:-}
            labels_indented=""
            for label_pair in $label_pairs; do
              key=${label_pair%=*}
              value=${label_pair#*=}

              labels_indented="${labels_indented}\n      ${key}: '${value}'"
            done

            instance_selector__vcpus=${instance_selector__vcpus:-2}
            instance_selector__memory=${instance_selector__memory:-2}

            volume_size=${volume_size:-4}
            volume_type=${volume_type:-gp3}
            volume_iops=${volume_iops:-3000}
            volume_throughput=${volume_throughput:-125}
            min_size=${min_size:-0}
            max_size=${max_size:-0}
            spot=${spot:-true}

            printf """apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: '$CLUSTER_NAME'
  region: '$REGION'

managedNodeGroups:
  - name: '$nodegroup'
    instancePrefix: '$instance_prefix'
    instanceName: '$instance_name'
    labels: $labels_indented
    volumeType: '$volume_type'
    volumeSize: $volume_size
    volumeIOPS: $volume_iops
    volumeThroughput: $volume_throughput
    minSize: $min_size
    maxSize: $max_size
    spot: $spot
    iam:
      withAddonPolicies:
        autoScaler: true
        imageBuilder: true
        ebs: true
        albIngress: true
""" > /tmp/eksler.nodegroup.$CLUSTER_NAME.$REGION.$nodegroup.yml

            if [ "${instance_type:-}" != "" ]; then
              printf "    instanceType: ${instance_type}\n" >> /tmp/eksler.nodegroup.$CLUSTER_NAME.$REGION.$nodegroup.yml
            elif [ "${instance_types:-}" != "" ]; then
              printf "    instanceTypes:\n" >> /tmp/eksler.nodegroup.$CLUSTER_NAME.$REGION.$nodegroup.yml

              IFS=','
              for instance_type in ${instance_types:-}; do
                printf "      - ${instance_type}\n" >> /tmp/eksler.nodegroup.$CLUSTER_NAME.$REGION.$nodegroup.yml
              done
              IFS=' '
            else
              printf """    instanceSelector:
      vCPUs: $instance_selector__vcpus
      memory: '$instance_selector__memory'
""" >> /tmp/eksler.nodegroup.$CLUSTER_NAME.$REGION.$nodegroup.yml
            fi

            if [ "${ami:-}" != "" ]; then
              printf """
    ami: ${ami}
    preBootstrapCommands:
      - echo 'world' > /hello
    overrideBootstrapCommand: |
      #!/bin/bash
      /etc/eks/bootstrap.sh '$CLUSTER_NAME'
""" /tmp/eksler.nodegroup.$CLUSTER_NAME.$REGION.$nodegroup.yml
            elif [ "${ami_family:-}" != "" ]; then
              printf "    amiFamily: ${ami_family}\n" >> /tmp/eksler.nodegroup.$CLUSTER_NAME.$REGION.$nodegroup.yml
            fi

            cat /tmp/eksler.nodegroup.$CLUSTER_NAME.$REGION.$nodegroup.yml

            exec eksctl --verbose $EKSCTL_LOG_LEVEL create nodegroup -f /tmp/eksler.nodegroup.$CLUSTER_NAME.$REGION.$nodegroup.yml
          ;;
          delete)
            _forever eksctl --verbose $EKSCTL_LOG_LEVEL delete nodegroup --region="${REGION}" --cluster="${CLUSTER_NAME}" "${nodegroup}"

            _never $0 with "${REGION}" "${CLUSTER_NAME}" get "${nodegroup}"
          ;;
          get)
            exec eksctl --verbose $EKSCTL_LOG_LEVEL get nodegroup --region="${REGION}" --cluster="${CLUSTER_NAME}" ${@:5}
          ;;
        esac
      ;;
      kubectl|k)
        exec kubectl ${@:5}
      ;;
      *)
        _err "unknown with ${withcommand}"
      ;;
    esac
  ;;
  *)
    _err "unknown subcommand ${subcommand}"
  ;;
esac