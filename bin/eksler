#!/usr/bin/env bash
set -euo pipefail

_on_error() {
  trap '' ERR
  line_path=$(caller)
  line=${line_path% *}
  path=${line_path#* }

  echo ""
  echo "ERR $path:$line $BASH_COMMAND exited with $1"
  _shutdown
}
trap '_on_error $?' ERR

_shutdown() {
  trap '' TERM INT
  echo ""
  echo "SHUTDOWN ($0)"

  kill 0
  wait

  echo "bye. $0"
  exit 0
}
trap _shutdown TERM INT

_echoerr() {
  1>&2 echo "$@"
}

_output() {
  _echoerr " --[ $0 ]--[ $SECONDS ]-- $*"
}

_err() {
  _output "err: $*"
  exit 1
}

_done() {
  echo ""
  _output "$* DONE in ${SECONDS}s"
}

_assert_namespace() {
  while true; do
    output=$(
      kubectl get --no-headers --ignore-not-found namespace "$1"
    ) && break
    sleep 1
  done

  if [[ "$output" == "" ]]; then
    _err "namespace '$1' not found"
  fi
}

_assert_region() {
  for region in $($0 regions); do
    [[ "$region" == "$1" ]] && return 0
  done

  _err "invalid region '$1'"
}

export AWS_PAGER=""
export EKSCTL_COMMON_OPTS="-C false"

handled=yes
subcommand=${1:-}
case "${subcommand}" in
  regions)
    if [[ -f /tmp/eksler-regions ]]; then
      cat /tmp/eksler-regions
      exit 0
    fi

    while true; do
      # command requires *any* region, that's why us-east-1 hardcoded
      output=$(aws ec2 --region us-east-1 describe-regions --output text  --query='Regions[*].RegionName') && break
      sleep 1
    done

    echo "$output" | xargs -n1 | sort | xargs | tee /tmp/eksler-regions
  ;;
  list)
    region=${2:-}
    if [[ "$region" == "" ]]; then
      for region in $($0 regions); do
        "$0" list "$region"
      done

      exit
    fi

    _assert_region "$region"

    while true; do
      output=$(
        2>/dev/null eksctl "$EKSCTL_COMMON_OPTS" get cluster --region="$region" --output=json
      ) && break
      sleep 1
    done

    [[ "$output" == "[]" ]] && exit 0

    echo "$output" | jq -re '.[] | .Region + " " + .Name'
  ;;
  ami)
    region="$2"
    kubernetes_version="$3"

    _assert_region "$region"

    while true; do
      aws ec2 describe-images \
        --region "$region" \
        --filters "Name=name,Values=*amazon-eks-node-${kubernetes_version}-*" "Name=architecture,Values=x86_64" \
        --query "sort_by(Images, &CreationDate)[-1].ImageId" \
        --output text && break
      sleep 1
    done
  ;;
  instances)
    region="$2"
    vcpus="$3"
    memory="$4"
    class="$5"

    while true; do
      output=$(
        ec2-instance-selector \
          --region="$region" \
          --vcpus="$vcpus" \
          --memory-min="$memory" \
          --hypervisor nitro \
          --cpu-architecture x86_64 \
          --gpus 0 \
          --network-performance-max 25 \
          --root-device-type ebs \
          --deny-list "^vt.|^inf.|d\.|en\.|dn\." \
          --usage-class="$class" \
          --price-per-hour-max 2 \
          --max-results 100
      ) && break

      case "$output" in
        *narrow*)
          exit 1
        ;;
      esac
    done

    echo "$output"
  ;;
  *)
    handled=no
  ;;
esac
[ "$handled" = "yes" ] && exit 0

export REGION="$3"
export CLUSTER_NAME="$4"
export KUBECONFIG="${KUBECONFIG:-$HOME/.kube/aws-eks-${REGION}-${CLUSTER_NAME}}"

_assert_region "$REGION"

subsubcommand="$2"

handled=yes
case "${subcommand}" in
  cluster)
    case "${subsubcommand}" in
      assert-namespace)
        _assert_namespace "$5"
      ;;
      get)
        while true; do
          output=$(2>&1 eksctl get cluster --region="$REGION" "$CLUSTER_NAME" --output=json || true)

          case $output in
            *"StatusCode: 404"*)
              _err "cluster '$CLUSTER_NAME' not found in region '$REGION'"
              exit 1
            ;;
            *ACTIVE*)
              echo "$output" | tail -n +3
              break
            ;;
            *)
              _echoerr "$output"
            ;;
          esac
        done
      ;;
      version)
        while true; do
          >/dev/null $0 cluster get "$REGION" "$CLUSTER_NAME" || exit 1

          version=$(
            2>/dev/null eksctl "$EKSCTL_COMMON_OPTS" get cluster --region="$REGION" "$CLUSTER_NAME" --output=json | jq -r -e '.[].Version'
          ) && break

          sleep 1
        done

        echo "$version"
      ;;
      delete)
        $0 managednodegroup delete-all "$REGION" "$CLUSTER_NAME"

        while true; do
          $0 cluster get "$REGION" "$CLUSTER_NAME" || break

          eksctl "$EKSCTL_COMMON_OPTS" delete cluster --region="$REGION" --name="$CLUSTER_NAME" --wait --force || true

          sleep 1
        done

        for stack_name in eksctl-$CLUSTER_NAME-cluster eksctl-$CLUSTER_NAME-addon-vpc-cni; do
          while true; do
            while true; do
              describe_stacks_output=$(
                aws --region="$REGION" cloudformation describe-stacks --output=json
              ) && break
              sleep 1
            done

            echo "$describe_stacks_output" | jq -r -e --arg StackName "$stack_name" '.Stacks[] | select(.StackName==$StackName)' || break

            aws --region="$REGION" cloudformation delete-stack --stack-name="$stack_name" || true
            sleep 1
          done
        done
      ;;
      ensure)
        $0 cluster get "$REGION" "$CLUSTER_NAME" && exit
        exec $0 cluster create "$REGION" "$CLUSTER_NAME" "${@:5}"
      ;;
      create)
        network=$5
        kubernetes_version=$6

        echo """
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: '${CLUSTER_NAME}'
  region: '${REGION}'
  version: '${kubernetes_version}'

# NOTE: These addons are required in this file for ipv6 to work
addons:
  - name: vpc-cni
  - name: coredns
  - name: kube-proxy
iam:
  withOIDC: true
""" >"/tmp/eksler.$REGION.$CLUSTER_NAME.cluster.yml"

        case "$network" in
          ipv6)
            echo """
kubernetesNetworkConfig:
  ipFamily: IPv6
""" >>"/tmp/eksler.$REGION.$CLUSTER_NAME.cluster.yml"
          ;;
          ipv4)
            :
          ;;
          *)
            _err "unknown network: $network"
          ;;
        esac

        cat "/tmp/eksler.$REGION.$CLUSTER_NAME.cluster.yml"

        while true; do
          "$0" cluster get "$REGION" "$CLUSTER_NAME" && break

          eksctl "$EKSCTL_COMMON_OPTS" create cluster -f "/tmp/eksler.$REGION.$CLUSTER_NAME.cluster.yml" || "$0" cluster delete "$REGION" "$CLUSTER_NAME"
          sleep 1
        done

        _done "cluster create"
      ;;
      kubeconfig)
        while true; do
          >/dev/null $0 cluster get "$REGION" "$CLUSTER_NAME" || _err "no cluster '$CLUSTER_NAME' in '$REGION'"

          touch "$KUBECONFIG"
          >/dev/null 2>&1 eksctl utils write-kubeconfig --region="$REGION" --cluster="$CLUSTER_NAME" --kubeconfig="$KUBECONFIG" && break
          sleep 1
        done

        chmod go= "$KUBECONFIG"

        echo "$KUBECONFIG"
      ;;
      kubeconfig:contents)
        cat "$($0 cluster kubeconfig "$REGION" "$CLUSTER_NAME")"
      ;;
      delete-loadbalancers)
        if [[ "${5:-}" = "" ]]; then
          namespace_opt="--all-namespaces"
        else
          namespace_opt="-n $5"
        fi

        while true; do
          kubectl get svc $namespace_opt -o=jsonpath='{.items[?(@.spec.type=="LoadBalancer")]}' | kubectl delete -f - && break

          sleep 1
        done
      ;;
      kubectl)
        exec kubectl "${@:5}"
      ;;
      helm)
        exec helm "${@:5}"
      ;;
      exec)
        exec "${@:5}"
      ;;
      *)
        _err "unknown cluster subcommand '$subsubcommand'"
      ;;
    esac
  ;;
  managednodegroup)
    >/dev/null $0 cluster get "$REGION" "$CLUSTER_NAME" || _err "no such cluster '$CLUSTER_NAME' in region '$REGION'"

    handled=yes
    case "$subsubcommand" in
     list)
        while true; do
          output=$(2>/dev/null eksctl "$EKSCTL_COMMON_OPTS" get nodegroups --region="$REGION" --cluster="$CLUSTER_NAME" --output=json) && break
          sleep 1
        done

        [ "$output" = "[]" ] && exit

        echo "$output" | jq -r '.[].Name' | sort
      ;;
      delete-all)
        for managednodegroup in $($0 managednodegroup list "$REGION" "$CLUSTER_NAME"); do
          (
            $0 managednodegroup delete "$REGION" "$CLUSTER_NAME" "$managednodegroup"
          ) 2>&1 | sed -le "s#^#$managednodegroup: #;" &
        done

        wait
      ;;
      *)
        handled=no
      ;;
    esac
    [[ "$handled" == "yes" ]] && exit

    name=$5
    handled=yes
    case "$subsubcommand" in
      get)
        while true; do
          output=$(2>&1 eksctl "$EKSCTL_COMMON_OPTS" get nodegroup --region="$REGION" --cluster="$CLUSTER_NAME" --output=json "$name" || true)

          case $output in
            *"StatusCode: 404"*)
              exit 1
            ;;
            *"StatusCode: 400"*)
              # also when it does not exist
              exit 1
            ;;
            *ACTIVE*)
              break
            ;;
            *CREATING*)
              :
            ;;
            *)
              _echoerr "$output"
            ;;
          esac

          sleep 1
        done

        _assert_namespace "eksler"

        while true; do
          output=$(kubectl get configmap -n "eksler" "managednodegroup-$name" -o jsonpath='{.data.yaml}' --ignore-not-found) && break
          sleep 1
        done

        printf "%s\n" "$output"
        exit
      ;;
      delete)
        while true; do
          $0 managednodegroup get "$REGION" "$CLUSTER_NAME" "$name" || break

          eksctl "$EKSCTL_COMMON_OPTS" delete nodegroup --region="$REGION" --cluster="$CLUSTER_NAME" --wait "$name" || true
          sleep 1
        done

        for stack_name in eksctl-$CLUSTER_NAME-nodegroup-$name; do
          while true; do
            while true; do
              describe_stacks_output=$(
                aws --region="$REGION" cloudformation describe-stacks --output=json
              ) && break
              sleep 1
            done

            echo "$describe_stacks_output" | jq -r -e --arg StackName "$stack_name" '.Stacks[] | select(.StackName==$StackName)' || break

            aws --region="$REGION" cloudformation delete-stack --stack-name="$stack_name" || true
            sleep 1
          done
        done

        _assert_namespace "eksler"

        while true; do
          kubectl delete configmap -n "eksler" "managednodegroup-$name" --ignore-not-found && break
          sleep 1
        done
      ;;
      purge)
        keep=$6
        for managednodegroup in $($0 managednodegroup list "$REGION" "$CLUSTER_NAME"); do
          case "$managednodegroup" in
            "$keep")
              _echoerr "keep $managednodegroup"
            ;;
            $name-*)
              _echoerr "delete $managednodegroup"
              (
                exec $0 managednodegroup delete "$REGION" "$CLUSTER_NAME" "$managednodegroup"
              ) 2>&1 | sed -le "s#^#$managednodegroup: #;" &
            ;;
            *)
              _echoerr "ignore $managednodegroup"
            ;;
          esac
        done

        wait
      ;;
      find)
        for managednodegroup in $($0 managednodegroup list "$REGION" "$CLUSTER_NAME"); do
          case "$managednodegroup" in
            $name-*)
              echo "$managednodegroup"
              exit 0
            ;;
          esac
        done

        exit 1
      ;;
      ensure)
        $0 managednodegroup find "$REGION" "$CLUSTER_NAME" "$name" && exit
        _output "did not find managed nodegroup '$name' in '$REGION' '$CLUSTER_NAME', will create a new one"
        exec $0 managednodegroup create "$REGION" "$CLUSTER_NAME" "$name" "${@:6}"
      ;;
      create)
        revision=$(date +"%Y-%m-%d-%H-%M-%S")
        name_revision="${name}-${revision}"

        label_pairs=""
        for opt in "${@:6}"; do
          case $opt in
            --spot=*)
              spot=${opt#*=}
            ;;
            --vcpus=*)
              vcpus=${opt#*=}
            ;;
            --memory=*)
              memory=${opt#*=}
            ;;
            --label=*)
              label_pairs="$label_pairs ${opt#*=}"
            ;;
            --class=*)
              class=${opt#*=}
            ;;
            --ami=*)
              ami=${opt#*=}
            ;;
            --volume-size=*)
              volume_size=${opt#*=}
            ;;
            --volume-type=*)
              volume_type=${opt#*=}
            ;;
            --volume-iops=*)
              volume_iops=${opt#*=}
            ;;
            --volume-throughput=*)
              volume_throughput=${opt#*=}
            ;;
            --min-size=*)
              min_size=${opt#*=}
            ;;
            --max-size=*)
              max_size=${opt#*=}
              [ "${max_size}" -gt 450 ] && _err "max size ${max_size} greater than 450"
            ;;
            *)
              _err "unknown opt: $opt"
            ;;
          esac
        done

        if [ "$class" = "spot" ]; then
          spot=true
        else
          spot=false
        fi

        if [ "${ami:-}" = "" ]; then
          cluster_version=$($0 cluster version "$REGION" "$CLUSTER_NAME")
          ami=$($0 ami "$REGION" "$cluster_version")
        fi

        volume_size=${volume_size:-4}
        volume_type=${volume_type:-gp3}
        volume_iops=${volume_iops:-3000}
        volume_throughput=${volume_throughput:-125}

        min_size=${min_size:-0}
        max_size=${max_size:-450}

        labels_indented=""
        tags_intended=""
        for label_pair in $label_pairs; do
          key=${label_pair%=*}
          value=${label_pair#*=}

          labels_indented="$labels_indented
      $key: '$value'"
          tags_intended="
      'k8s.io/cluster-autoscaler/node-template/label/$key': '$value'"
        done

        # if no instances found, delete the group so that eksler namespace is deleted
        if ! instances=$($0 instances "$REGION" "$vcpus" "$memory" "$class"); then
          _echoerr "no instances found with vcpus: '$vcpus', memory: '$memory' of class '$spot' in region '$REGION', will delete configuration and exit"
          exec $0 managednodegroup delete "$REGION" "$CLUSTER_NAME" "$name_revision"
        fi

        instances_indented=""
        for instance in $instances; do
          instances_indented="${instances_indented}
      - $instance"
        done

        echo """apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: '$CLUSTER_NAME'
  region: '$REGION'

managedNodeGroups:
  - name: '$name_revision'
    labels: $labels_indented
    volumeType: '$volume_type'
    volumeSize: $volume_size
    volumeIOPS: $volume_iops
    volumeThroughput: $volume_throughput
    minSize: $min_size
    maxSize: $max_size
    spot: $spot
    tags: $tags_intended
    iam:
      withAddonPolicies:
        autoScaler: true
        imageBuilder: true
        ebs: true
        albIngress: true
        cloudWatch: true
    instanceTypes: $instances_indented
    preBootstrapCommands:
      - date > /tmp/eksler.start
      - echo 'changing root password'
      - echo 'root:badpassword' | sudo chpasswd
      - echo 'password changed'
      - sudo yum install -y htop iotop nano screen bind-utils
      - sudo amazon-linux-extras install epel -y
      - date > /tmp/eksler.done
    # NOTE: broken (?) since 14.8.2022 or so
    # ami: '$ami'
    # overrideBootstrapCommand: |
    #   #!/bin/bash
    #   set -euo pipefail
    #   date > /tmp/eksler.bootstrap.start
    #   /etc/eks/bootstrap.sh '$CLUSTER_NAME' |& tee /tmp/eksler.bootstrap.output
    #   echo $? > /tmp/eksler.bootstrap.status
    #   date > /tmp/eksler.bootstrap.done
""" > "/tmp/eksler.$REGION.$CLUSTER_NAME.nodegroup.$name-$revision.yml"

        cat "/tmp/eksler.$REGION.$CLUSTER_NAME.nodegroup.$name-$revision.yml"

        # NOTE: keep configmap creation before actual creation for cleanup reasons
        while true; do
          >/dev/null 2>&1 kubectl get namespace eksler && break
          >/dev/null 2>&1 kubectl create namespace eksler && break
        done

        while true; do
          kubectl get configmap -n eksler "managednodegroup-$name_revision" && break
          kubectl create configmap -n eksler "managednodegroup-$name_revision" --from-file=yaml="/tmp/eksler.$REGION.$CLUSTER_NAME.nodegroup.$name-$revision.yml" && break
        done

        while true; do
          _output "get nodegroup"
          $0 managednodegroup get "$REGION" "$CLUSTER_NAME" "$name_revision" && break

          if ! eksctl "$EKSCTL_COMMON_OPTS" create nodegroup --timeout 6m -f "/tmp/eksler.$REGION.$CLUSTER_NAME.nodegroup.$name-$revision.yml"; then
            _output "failed, delete"
            $0 managednodegroup delete "$REGION" "$CLUSTER_NAME" "$name_revision"
          fi
        done

        $0 managednodegroup tag "$REGION" "$CLUSTER_NAME" "$name_revision"

        _output "purge"
        $0 managednodegroup purge "$REGION" "$CLUSTER_NAME" "$name" "$name_revision"
      ;;
      tag)
        while true; do
          asg=$(
            aws eks describe-nodegroup --region "$REGION" --cluster-name "$CLUSTER_NAME" \
              --nodegroup-name "$name" \
              --query "nodegroup.resources.autoScalingGroups[0].name" \
              --output text
          ) && break

          echo "failed to describe-nodegroup asgs"
          sleep 1
        done

        while true; do
          labels=$(
            aws eks describe-nodegroup --region "$REGION" --cluster-name "$CLUSTER_NAME" \
              --nodegroup-name "$name" \
              --query "nodegroup.labels" \
              --output=json | jq -r 'to_entries[] | .key + "=" + .value'
          ) && break

          echo "failed to describe-nodegroup labels"
          sleep 1
        done

        for label in $labels; do
          label_key=${label%=*}
          label_value=${label#*=}

          case $label_key in
            alpha.eksctl.io*)
              echo "skip: $label"
              continue
            ;;
          esac

          while true; do
            aws autoscaling create-or-update-tags --region "$REGION" \
              --tags "ResourceId=${asg},ResourceType=auto-scaling-group,Key=k8s.io/cluster-autoscaler/node-template/label/${label_key},Value=${label_value},PropagateAtLaunch=true" && break

            echo "failed to create-or-update-tags"
            sleep 1
          done
        done
      ;;
      *)
        handled=no
      ;;
    esac
  ;;
  *)
    handled=no
  ;;
esac

[[ "$handled" == "yes" ]] && exit

_echoerr "Unknown 'eksler $*'"
exit 1
