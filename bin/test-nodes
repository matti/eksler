#!/usr/bin/env bash
set -euo pipefail

export REGION=$1
export CLUSTER_NAME=$2
mode=${3:-ensure}
configurations=${*:4}
[ "$configurations" = "" ] && configurations="base-2-4-6 test-2-4-6 test-4-8-6 test-8-16-6"

for configuration in $configurations; do
  name=${configuration%%-*}
  resources=${configuration#*-}
  IFS=- read -r cpus mem disk_size <<< "$resources"

  case $name in
    base)
      min=2
      max=9
      labels=""
    ;;
    *)
      min=0
      max=450
      labels=test=yes
    ;;
  esac

  label_opts=""
  for label in $labels; do
    label_opts="$label_opts --label=$label"
  done

  (
    exec bin/eksler managednodegroup "$mode" "$REGION" "$CLUSTER_NAME" "$configuration" \
      --class=spot \
      --vcpus="$cpus" --memory="$mem" --volume-size="$disk_size" \
      --min-size=$min --max-size=$max \
      $label_opts
  ) 2>&1 | sed -le "s#^#$configuration: #;" &
done

wait


# (
#   _forever kubectl delete priorityclass -l megatest-1=yes --ignore-not-found
#   _forever kubectl apply -f tests/megatest-1
# ) 2>&1 | sed -le "s#^# megatest-1: #;" &

# for chart in "cluster-autoscaler-1 test" aws-load-balancer-controller-1 metrics-server-1 descheduler-1 "ingress-nginx-1 ipv6"; do
#   (
#     bin/helmer install $chart
#   ) 2>&1 | sed -le "s#^# helm $chart: #;" &
# done

# export POOLS=${POOLS:-x-1-pre t-2-4-pre-p9-1 t-8-16-pre-p8-1 t-16-32-pre-p7-1 t-32-64-pre-p6-1 t-48-96-pre-p5-1 t-64-128-pre-p4-1 t-96-192-pre-p3-1}

# for pool in $POOLS; do
#   (
#     if [ "${POOLS_REFRESH:-}" != "yes" ]; then
#       if bin/ekslerpooler get $REGION $CLUSTER_NAME $generation $pool; then
#         _output "pool $pool already exists, skip"
#         exit 0
#       fi
#     fi

#     bin/test-pools $pool $REGION $CLUSTER_NAME $generation

#     _done
#   ) 2>&1 | sed -le "s#^# ++ pool [${SECONDS}]: $pool: #;" &
# done

# echo "waiting jobs ..."
# wait
# echo "..done"

# bin/eksler with $REGION $CLUSTER_NAME list


# TODO: https://github.com/kubernetes-sigs/aws-load-balancer-controller/issues/2039
# https://aws.amazon.com/premiumsupport/knowledge-center/eks-alb-ingress-controller-fargate/
# https://github.com/kubernetes-sigs/aws-load-balancer-controller/blob/main/docs/install/iam_policy.json
# bin/helmer install ingress-nginx-1 $network

# bin/test-test $network

wait