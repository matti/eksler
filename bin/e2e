#!/usr/bin/env bash
set -euo pipefail

_on_error() {
  trap '' ERR
  line_path=$(caller)
  line=${line_path% *}
  path=${line_path#* }

  echo ""
  echo "ERR $path:$line $BASH_COMMAND exited with $1"
  exit 1
}
trap '_on_error $?' ERR

_shutdown() {
  trap '' TERM INT
  echo ""
  echo "SHUTDOWN ($0)"

  kill 0
  wait

  echo "bye. $0"
  exit 0
}
trap _shutdown TERM INT

REGION=$1
CLUSTER_NAME=$2
network=$3
kubernetes_version=$4

export REGION CLUSTER_NAME

set -x
# eksler list "$REGION"
# eksler ami "$REGION" "$kubernetes_version"
# eksler cluster ensure "$REGION" "$CLUSTER_NAME" "$network" "$kubernetes_version"
# eksler cluster kubeconfig:contents "$REGION" "$CLUSTER_NAME"
# eksler cluster delete-loadbalancers "$REGION" "$CLUSTER_NAME"
# eksler cluster kubectl "$REGION" "$CLUSTER_NAME" get node
# eksler cluster get "$REGION" "$CLUSTER_NAME"
# eksler cluster version "$REGION" "$CLUSTER_NAME"

# eksler managednodegroup list "$REGION" "$CLUSTER_NAME"
# eksler managednodegroup get "$REGION" "$CLUSTER_NAME" nonexisting && exit 1
eksler managednodegroup delete "$REGION" "$CLUSTER_NAME" nonexisting && exit 1
eksler managednodegroup delete-all "$REGION" "$CLUSTER_NAME"
